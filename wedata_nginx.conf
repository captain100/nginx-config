#表示工作进程数设置cup的核数
worker_processes 2;
error_log /data1/logs/nginx_error.log crit;

events {
    worker_connections  1024;
}
http {
    #mime.types浏览器请求的文件媒体类型，类型由mime.types文件定义
    include  mime.types;
    #用来告诉浏览器请求的文件媒体类型
    default_type application/octet-stream;

    server_names_hash_bucket_size 128;
    client_header_buffer_size 32k;
    large_client_header_buffers 4 32k;


    sendfile on;

    keepalive_timeout 65;

    tcp_nodelay on;
    #FastCGI是一个可伸缩地、高速地在HTTP server和动态脚本语言间通信的接口
    #指定连接到后端FastCGI的超时时间
    fastcgi_connect_timeout 300;
    #指定向FastCGI传送请求的超时时间，这个值是已经完成两次握手后向FastCGI传送请求的超时时间。
    fastcgi_send_timeout 300;
    #指定接收FastCGI应答的超时时间，这个值是已经完成两次握手后接收FastCGI应答的超时时间。
    fastcgi_read_timeout 300;
    #用于指定读取FastCGI应答第一部分需要用多大的缓冲区，这个值表示将使用1个64KB的缓冲区读取应答的第一部分（应答头），可以设置为fastcgi_buffers选项指定的缓冲区大小。
    fastcgi_buffer_size 64k;
    #指定本地需要用多少和多大的缓冲区来缓冲FastCGI的应答请求。
    #如果一个PHP脚本所产生的页面大小为256KB，那么会为其分配4个64KB的缓冲区来缓存；
    #如果页面大小大于256KB，那么大于256KB的部分会缓存到fastcgi_temp指定的路径中，但是这并不是好方法，因为内存中的数据处理速度要快于硬盘。
    #一般这个值应该为站点中PHP脚本所产生的页面大小的中间值，如果站点大部分脚本所产生的页面大小为256KB，那么可以把这个值设置为“16 16k”、“4 64k”等。
    fastcgi_buffers 4 64k;
    #的默认值是fastcgi_buffers的两倍。
    fastcgi_busy_buffers_size 128k;
    #表示在写入缓存文件时使用多大的数据块，默认值是fastcgi_buffers的两倍。
    fastcgi_temp_file_write_size 128k;

    #开启gzip压缩,对网页文件、css、js、xml等启动gzip压缩，减少数据传输量，提高访问速度
    gzip on;
    #该指令允许压缩的页面最小字节数，页面字节数从header头中的Content-Length中进行获取。
    gzip_min_length 1k;
    #设置系统获取几个单位的缓存用于存储gzip的压缩结果数据流。下面的设置代表16k为单位，按照原始数据大小以16k为单位的4倍申请内存。
    gzip_buffers 4 16k;
    #识别http的协议版本。
    gzip_http_version 1.1;
    #gzip压缩比，1 压缩比最小处理速度最快，9 压缩比最大但处理速度最慢（传输快但比较消耗cpu）
    gzip_comp_level 2;
    #匹配mime类型进行压缩，无论是否指定，“text/html”类型总是会被压缩的。
    gzip_types text/plain application/x-javascript text/css application/xml;

    gzip_vary on;

    #允许客户端请求的最大单个文件字节数
    client_max_body_size 300m;

    #缓冲区代理缓冲用户端的最大请求字节数，可以理解为先保存到本地再传给用户
    client_body_buffer_size 128k;

    #跟后端服务器连接的超时间，发起握手等候相应的超时时间
    proxy_connect_timeout 600;

    #连接成功后等候后端服务器响应时间其实已经进入后端的排队队列之中等候处理
    proxy_read_timeout 600;

    #后端服务器数据回传时间就是在规定的时间内后端服务器必须完成所有的数据
    proxy_send_timeout 600;

    #代理请求缓存区这个缓存区间会保存用户的头信息以供nginx进行规则处理一般只要能保存下头信息即可
    proxy_buffer_size 16k;
    #同上 告诉nginx保存单个用的几个buffer最大用多少空间
    proxy_buffers 4 32k;
    #如果系统很忙的时候可以申请让更大的proxy_buffers官方推荐＊2
    proxy_busy_buffers_size 64k;
    #proxy缓存临时文件的大小
    proxy_temp_file_write_size 64k;
    #缓存proxy_temp_path和proxy_cache_path必须在同一个分区
    proxy_temp_path /var/tmp;
    #该指令用于设置缓存文件的存放路径，设置缓存区名称为one ，内存缓存空间大小为8M，自动清除超过1天没有被访问的缓存数据，硬盘缓存空间大小为30GB
    proxy_cache_path  /var/cache/nginx levels=1:2 keys_zone=one:8m inactive=1d max_size=30g;


    upstream wedate {
            server 10.0.0.48:8080 weight=1 max_fails=2 fail_timeout=30s;
            server 10.0.0.50:8080 weight=1 max_fails=2 fail_timeout=30s;
    }


    server {
    listen 8080;
    server_name localhost;

    location / {
        proxy_pass http://wedate;
        #如果后端的服务器返回502、504、执行超时等错误，自动将请求转发到upstream负载均衡池中的另一台服务器，实现故障转移
        proxy_next_upstream http_500 http_502 http_503 http_504 error timeout invalid_header;

        ### Set headers ####
        #使用$host变量，它的值相当于服务器的主机名
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        ### Most PHP, Python, Rails, Java App can use this header ###
        proxy_set_header X-Forwarded-Proto https;

        proxy_cache one;
        proxy_cache_key sfs$request_uri$scheme;
    }

    access_log /data1/logs/wedate_access.log;
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
                    root   html;
    }

    }

}

